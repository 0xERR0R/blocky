// Code generated by mockery v2.23.1. DO NOT EDIT.

package parsers

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockSeriesParser is an autogenerated mock type for the SeriesParser type
type MockSeriesParser[T interface{}] struct {
	mock.Mock
}

type MockSeriesParser_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *MockSeriesParser[T]) EXPECT() *MockSeriesParser_Expecter[T] {
	return &MockSeriesParser_Expecter[T]{mock: &_m.Mock}
}

// Next provides a mock function with given fields: _a0
func (_m *MockSeriesParser[T]) Next(_a0 context.Context) (T, error) {
	ret := _m.Called(_a0)

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (T, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) T); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(T)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSeriesParser_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type MockSeriesParser_Next_Call[T interface{}] struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockSeriesParser_Expecter[T]) Next(_a0 interface{}) *MockSeriesParser_Next_Call[T] {
	return &MockSeriesParser_Next_Call[T]{Call: _e.mock.On("Next", _a0)}
}

func (_c *MockSeriesParser_Next_Call[T]) Run(run func(_a0 context.Context)) *MockSeriesParser_Next_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSeriesParser_Next_Call[T]) Return(_a0 T, _a1 error) *MockSeriesParser_Next_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSeriesParser_Next_Call[T]) RunAndReturn(run func(context.Context) (T, error)) *MockSeriesParser_Next_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Position provides a mock function with given fields:
func (_m *MockSeriesParser[T]) Position() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockSeriesParser_Position_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Position'
type MockSeriesParser_Position_Call[T interface{}] struct {
	*mock.Call
}

// Position is a helper method to define mock.On call
func (_e *MockSeriesParser_Expecter[T]) Position() *MockSeriesParser_Position_Call[T] {
	return &MockSeriesParser_Position_Call[T]{Call: _e.mock.On("Position")}
}

func (_c *MockSeriesParser_Position_Call[T]) Run(run func()) *MockSeriesParser_Position_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSeriesParser_Position_Call[T]) Return(_a0 string) *MockSeriesParser_Position_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSeriesParser_Position_Call[T]) RunAndReturn(run func() string) *MockSeriesParser_Position_Call[T] {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockSeriesParser interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockSeriesParser creates a new instance of MockSeriesParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockSeriesParser[T interface{}](t mockConstructorTestingTNewMockSeriesParser) *MockSeriesParser[T] {
	mock := &MockSeriesParser[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
