name: Build binary

on:
  workflow_dispatch:
    inputs:
      goos:
        description: "Target OS"
        required: true
        default: "linux"
        type: choice
        options:
          - linux
          - windows
          - freebsd
          - netbsd
          - openbsd
          - darwin
      goarch:
        description: "Target architecture"
        required: true
        default: "amd64"
        type: choice
        options:
          - amd64
          - arm
          - arm64
      goarm:
        description: "Target ARM version(only used with arm architecture)"
        required: true
        default: "7"
        type: choice
        options:
          - 6
          - 7

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Input Check
        id: check
        run: |
          if [[ "${{ inputs.goos }}" == "windows" && "${{ inputs.goarch }}" == "arm" ]]; then
            echo "Combination goos=windows goarch=arm is not supported"
            exit 1
          elif [[ "${{ inputs.goos }}" == "windows" && "${{ inputs.goarch }}" == "arm64" ]]; then
            echo "Combination goos=windows goarch=arm64 is not supported"
            exit 1
          fi

  build:
    runs-on: ubuntu-latest
    needs: check
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Golang
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Setup Zig
        uses: goto-bus-stop/setup-zig@v2

      - name: Setup ZigCC & ZigCPP
        run: |
          go install github.com/dosgo/zigtool/zigcc@latest
          go install github.com/dosgo/zigtool/zigcpp@latest

      - name: Download dependencies
        run: go mod download

      - name: Build
        env:
          GO_SKIP_GENERATE: 1
          CGO_ENABLED: 0
          CC: zigcc
          CXX: zigcpp
          GOOS: ${{ inputs.goos }}
          GOARCH: ${{ inputs.goarch }}
          GOARM: ${{ inputs.goarm }}
        run: |
          export VERSION=$(git describe --tags --always origin/main)
          if [[ "${{ inputs.goarch }}" != "arm" ]]; then
            unset GOARM
          fi
          make build

      - name: Rename binary
        run: |
          if [[ "${{ inputs.goos }}" == "windows" ]]; then
            mv bin/blocky bin/blocky.exe
          elif [[ "${{ inputs.goarch }}" == "arm" ]]; then
            mv bin/blocky bin/blocky-${{ inputs.goos }}-${{ inputs.goarch }}${{ inputs.goarm }}
          else
            mv bin/blocky bin/blocky-${{ inputs.goos }}-${{ inputs.goarch }}
          fi

      - name: Store build artifact
        uses: actions/upload-artifact@v4
        with:
          name: blocky
          path: bin/blocky*
          retention-days: 5
