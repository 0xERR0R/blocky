name: Development docker build

on:
  push:
    branches:
      - development
      - fb-*

permissions:
  security-events: write
  actions: read
  contents: read
  packages: write

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check:
    name: Check if workflow should run 
    runs-on: ubuntu-latest
    outputs:
      enabled: ${{ steps.check.outputs.enabled }}
    steps:
      - name: Enabled Check
        id: check
        shell: bash
        run: | 
          ENABLED=${{ secrets.DEVELOPMENT_DOCKER }}

          if [[ "${{ github.repository_owner }}" == "0xERR0R" ]]; then
            ENABLED="true"
          fi          

          if [[ "${ENABLED,,}" != "true" ]]; then
            echo "##[set-output name=enabled;]$(echo 0)"

            echo "Workflow is disabled"

            echo "### Workflow is disabled" >> $GITHUB_STEP_SUMMARY
            echo "To enable this workflow by creating a secret 'DEVELOPMENT_DOCKER' with the value 'true'" >> $GITHUB_STEP_SUMMARY
          else
            echo "##[set-output name=enabled;]$(echo 1)"

            echo "Workflow is enabled"
          fi

  docker:
    name: Build Docker image
    runs-on: ubuntu-latest
    needs: check
    if: ${{ needs.check.outputs.enabled == 1 }}
    outputs:
      branch: ${{ steps.extract_branch.outputs.branch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm,arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare build cache
        shell: bash
        run: |
          TOKEN64=$(echo ${{ secrets.GITHUB_TOKEN }} | base64)
          JSON=$(curl -s -H "Authorization: Bearer ${TOKEN64}" https://ghcr.io/v2/${{ github.repository }}/tags/list | jq .)
          CACHE_EXISTS=$(jq '[ .tags[]? | contains("buildcache") ] | any' <<< "$JSON")

          if [[ $CACHE_EXISTS == 'true' ]]; then
            echo "The buildcache tag is already initialized"
          else
            echo "Initializing buildcache tag"
            docker pull ghcr.io/0xerr0r/blocky:development
            docker tag ghcr.io/0xerr0r/blocky:development ghcr.io/${{ github.repository }}:buildcache
            docker push ghcr.io/${{ github.repository }}:buildcache
            echo "Initializing complete"
          fi

      - name: Extract branch name
        id: extract_branch
        shell: bash
        run: |
          BRANCH=${GITHUB_REF#refs/heads/}

          echo "##[set-output name=branch;]$(echo ${BRANCH})"

          echo "Branch: ${BRANCH}"

      - name: Get build args
        id: get_args
        shell: bash
        run: |
          VERSION=$(git describe --always --tags)
          BUILD_TIME=$(date '+%Y%m%d-%H%M%S')

          echo "##[set-output name=version;]$(echo ${VERSION})"
          echo "##[set-output name=build_time;]$(echo ${BUILD_TIME})"

          echo "VERSION: ${VERSION}"
          echo "BUILD_TIME: ${BUILD_TIME}"

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ steps.extract_branch.outputs.branch }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}:buildcache,mode=max
          build-args: |
            VERSION=${{ steps.get_args.outputs.version }}
            BUILD_TIME=${{ steps.get_args.outputs.build_time }}

  retag:
    name: Add DockerHub tag
    runs-on: ubuntu-latest
    needs: docker
    if: github.repository_owner == '0xERR0R'
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: DockerHub tag
        shell: bash
        run: |
          docker tag ghcr.io/${{ github.repository }}:${{ needs.docker.outputs.branch }} spx01/blocky:${{ needs.docker.outputs.branch }}
          docker push

  repo-scan:
    name: Repo vulnerability scan
    runs-on: ubuntu-latest
    needs: check
    if: needs.check.outputs.enabled == 1
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-repo-results.sarif'
          severity: 'CRITICAL'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-repo-results.sarif'

  image-scan:
    name: Image vulnerability scan
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner on Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ github.repository }}:${{ needs.docker.outputs.branch }}'
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-image-results.sarif'

  image-test:
    name: Test docker images
    runs-on: ubuntu-latest
    needs: docker
    strategy:
      fail-fast: true
      matrix:
        include:
          - arch: amd64
            distro: ubuntu-latest
            arm: false
          - arch: aarch64
            distro: buster
            arm: true
          - arch: armv6
            distro: buster
            arm: true
          - arch: armv7
            distro: buster
            arm: true
    steps:
      - name: Create test files
        shell: bash
        run: |
          # blocky config
          echo 'port: 5333' > /tmp/blocky_test.yml
          echo 'upstream:' >> /tmp/blocky_test.yml
          echo '  default:' >> /tmp/blocky_test.yml
          echo '    - 127.0.1.1' >> /tmp/blocky_test.yml
          echo 'blocking:' >> /tmp/blocky_test.yml
          echo '  clientGroupsBlock:' >> /tmp/blocky_test.yml
          echo '      - docker' >> /tmp/blocky_test.yml
          echo '  blackLists:' >> /tmp/blocky_test.yml
          echo '    docker:' >> /tmp/blocky_test.yml
          echo '      - |' >> /tmp/blocky_test.yml
          echo '        docker.com' >> /tmp/blocky_test.yml

          # test script
#          echo 'sudo apt-get update' > /tmp/test.sh
#          echo 'sudo apt-get install -y --no-install-recommends dnsutils' >> /tmp/test.sh
          echo '[ "$(dig docker.com @127.0.0.1 +short -p 5333)" ] && false || echo "docker.com is blocked"' > /tmp/test.sh
          echo '[ "$(dig github.com @127.0.0.1 +short -p 5333)" ] && echo "github.com is resolved" || false' >> /tmp/test.sh
          chmod +x /tmp/test.sh

          # print files
          echo 'Content of /tmp/blocky_test.yml'
          cat /tmp/blocky_test.yml
          echo 'Content of /tmp/test.sh'
          cat /tmp/test.sh

      - name: Test amd64 image
        if: ${{ matrix.arm }} == false
        shell: bash
        run: |
          docker run \
#          -d \
          -p 5333:5333/udp \
          --name test_${{ matrix.arch }} \
#          --rm \
          -v /tmp/blocky_test.yml:/app/config.yml:ro \
          ghcr.io/${{ github.repository }}:${{ needs.docker.outputs.branch }}
          /tmp/test.sh

      - name: Test arm image
        if: ${{ matrix.arm }}
        shell: bash
        run: |
          echo "Image arch: ${{ matrix.arch }}"
      
      - name: Stop docker container
        if: ${{ always() }}
        shell: bash
        run: |
          docker stop test_${{ matrix.arch }} || true