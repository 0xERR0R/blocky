name: Development docker build

on:
  push:
    branches:
      - development
      - fb-*

permissions:
  security-events: write
  actions: read
  contents: read
  packages: write

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check:
    name: Check if workflow should run 
    runs-on: ubuntu-latest
    outputs:
      enabled: ${{ steps.check.outputs.enabled }}
    steps:
      - name: Enabled Check
        id: check
        shell: bash
        run: | 
          ENABLED=${{ secrets.DEVELOPMENT_DOCKER }}

          if [[ "${{ github.repository_owner }}" == "0xERR0R" ]]; then
            ENABLED="true"
          fi          

          if [[ "${ENABLED,,}" != "true" ]]; then
            echo "##[set-output name=enabled;]$(echo 0)"

            echo "Workflow is disabled"

            echo "### Workflow is disabled" >> $GITHUB_STEP_SUMMARY
            echo "To enable this workflow by creating a secret 'DEVELOPMENT_DOCKER' with the value 'true'" >> $GITHUB_STEP_SUMMARY
          else
            echo "##[set-output name=enabled;]$(echo 1)"

            echo "Workflow is enabled"
          fi

  docker:
    name: Build Docker image
    runs-on: ubuntu-latest
    needs: check
    if: ${{ needs.check.outputs.enabled == 1 }}
    outputs:
      branch: ${{ steps.extract_branch.outputs.branch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm,arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract branch name
        id: extract_branch
        shell: bash
        run: |
          BRANCH=${GITHUB_REF#refs/heads/}

          echo "##[set-output name=branch;]$(echo ${BRANCH})"

          echo "Branch: ${BRANCH}"

      - name: Get build args
        id: get_args
        shell: bash
        run: |
          VERSION=$(git describe --always --tags)
          BUILD_TIME=$(date '+%Y%m%d-%H%M%S')

          echo "##[set-output name=version;]$(echo ${VERSION})"
          echo "##[set-output name=build_time;]$(echo ${BUILD_TIME})"

          echo "VERSION: ${VERSION}"
          echo "BUILD_TIME: ${BUILD_TIME}"

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ steps.extract_branch.outputs.branch }}
          build-args: |
            VERSION=${{ steps.get_args.outputs.version }}
            BUILD_TIME=${{ steps.get_args.outputs.build_time }}

  retag:
    name: Add DockerHub tag
    runs-on: ubuntu-latest
    needs: docker
    if: github.repository_owner == '0xERR0R'
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: DockerHub tag
        shell: bash
        run: |
          docker tag ghcr.io/${{ github.repository }}:${{ needs.docker.outputs.branch }} spx01/blocky:${{ needs.docker.outputs.branch }}
          docker push

  repo-scan:
    name: Repo vulnerability scan
    runs-on: ubuntu-latest
    needs: check
    if: needs.check.outputs.enabled == 1
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-repo-results.sarif'
          severity: 'CRITICAL'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-repo-results.sarif'

  image-scan:
    name: Image vulnerability scan
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner on Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ github.repository }}:${{ needs.docker.outputs.branch }}'
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-image-results.sarif'

  image-test:
    name: Test docker images
    runs-on: ubuntu-latest
    needs: docker
    strategy:
      fail-fast: true
      matrix:
        include:
          - arch: amd64
            distro: ubuntu-latest
            arm: false
          - arch: aarch64
            distro: buster
            arm: true
          - arch: armv6
            distro: buster
            arm: true
          - arch: armv7
            distro: buster
            arm: true
    steps:
      - name: Test amd64 image
        if: ${{ matrix.arm == false }}
        shell: bash
        run: | 
          echo '::group::Version for ${{ matrix.arch }}'
          docker run --rm ghcr.io/${{ github.repository }}:${{ needs.docker.outputs.branch }} version
          echo '::endgroup::'

      - name: Test arm image
        if: ${{ matrix.arm }}
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}
          #githubToken: ${{ secrets.GITHUB_TOKEN }}
          shell: /bin/bash
          install: |
            apt-get update
            apt-get install -y ca-certificates curl gnupg lsb-release
            mkdir -p /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
            $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
            apt-get update 
            apt-get install -y docker-ce docker-ce-cli containerd.io
          run: |
            echo '::group::Version for ${{ matrix.arch }}'
            docker run --rm ghcr.io/${{ github.repository }}:${{ needs.docker.outputs.branch }} version
            echo '::endgroup::'